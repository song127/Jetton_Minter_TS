#include "imports/stdlib.fc";
#include "imports/op-codes.fc";

(slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr() ;; jetton_address
    );
}

() save_data(slice jetton_address) impure inline {
    set_data(begin_cell()
            .store_slice(jetton_address)
            .end_cell()
    );
}

() send_mint(slice jetton_address, slice to_address, int amount) impure {
    var callback_body = begin_cell()
        .store_uint(32, op::internal_transfer()) ;; op
        .store_uint(64, 0) ;; query_id
        .store_coins(amount) ;; value
        .store_slice(null())
        .store_slice(null())
        .store_coins(0)
        .store_uint(0, 1)
        .end_cell();

    var msg_body = begin_cell()
        .store_uint(32, op::mint())
        .store_uint(64, 0) ;; query_id
        .store_slice(callback_body)
        .end_cell();

    var msg = begin_cell()
        .store_uint(4, 0) ;; flags
        .store_slice(jetton_address)
        .store_coins(0)
        .store_bits(1, 0) ;; extracurrency collection
        .store_coins(0) ;; ihr_fee
        .store_coins(0) ;; fwd_fee
        .store_slice(msg_body)
        .end_cell();

    send_raw_message(msg, 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of provide_wallet_address cost

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (slice jetton_address) = load_data();

    if(op == op::mint()) {
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();

        send_mint(to_address, amount);

        return ();
    }

    if(op == 2) {
        ;; change jetton address
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice new_jetton_address = in_msg_body~load_msg_addr();

        (slice old_jetton_address) = load_data();

        if (old_jetton_address != new_jetton_address) {
            save_data(new_jetton_address);
        }
    }
}